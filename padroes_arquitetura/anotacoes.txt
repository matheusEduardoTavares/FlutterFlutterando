MVC: Lógica de validações podem ser colocadas dentro do controller deixando por exemplo a GlobalKey<FormState> dentro do próprio controller. Podemos passar também a lógica de atualização de view para dentro de uma gerência de estado no controller.
MVP: O presenter vem no lugar do controller e é uma evolução do MVC. Ele traz um acoplamento menor que o MVC pois ele trabalha com interfaces. Basicamente, o presenter irá ter um contrato que a view deverá respeitar (irá implementá-lo), e passará a ter uma instância da view dentro dele por meio deste contrato. A view também terá a instância do presenter.
MVVM: Geralmente a relação entre um VIEW-CONTROLLER e um VIEW-PRESENTER é 1 para 1. No VIEW-VIEWMODEL fazemos camadas com baixo nível para faciltiar os testes unitários e ser completamente fácil de ter vários view model para uma page. Podemos ter um view model para cada regra de negócio e a view fazer uso de quantos view model precisar. Trabalhamos com a atualização das UI no viewModel fazendo uso do design pattern observer. A view acaba tendo mais código no MVVM que no MVP, mas a camada do view model ficará mais fácil de testar e ser reaproveitada depois.